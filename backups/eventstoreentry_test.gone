package eventstore_test

import (
	goes "github.com/vizidrix/eventstore"
	. "github.com/vizidrix/eventstore/test_utils"
	"log"
	"testing"
)

func eventstore_test_ignore() { log.Println("") }

func Test_Should_write_and_read_properties_from_valid_header(t *testing.T) {
	// Arrange
	headerData := make([]byte, 8)
	length := uint16(65)
	eventType := uint16(1024)
	crc := uint32(1000)

	// Act
	goes.PackHeaderIntoBytes(headerData, length, eventType, crc)
	header, err := goes.NewHeader(headerData)
	if err != nil {
		t.Fail()
	}

	// Assert
	AreEqual(t, length, header.Length(), "Should have stored the length")
	AreEqual(t, uint16(2), header.Blocks(), "Should have calculated correct block size")
	AreEqual(t, eventType, header.EventType(), "Should have stored the event type")
	AreEqual(t, crc, header.CRC(), "Should have stored the CRC value")
}

func Test_Header_Should_panic_if_data_length_is_too_short(t *testing.T) {
	//defer ExpectPanic(t, "Byte length too short")()

	// Arrange
	data := make([]byte, 7)

	// Act
	err := goes.PackHeaderIntoBytes(data, 1, 1, 1)

	// Assert
	IsNotNil(t, err, "Byte length too short")
}

func Test_Header_Should_panic_if_data_length_is_too_long(t *testing.T) {
	//defer ExpectPanic(t, "Byte length too long")()

	// Arrange
	data := make([]byte, 9)

	// Act
	err := goes.PackHeaderIntoBytes(data, 1, 1, 1)

	// Assert
	IsNil(t, err, "Assume we're looking at head of larger slice")
}

func Test_Convert_slice_of_header_to_slice_of_in64(t *testing.T) {
	// Arrange
	//headers := make([]goes.Header, 3)

	//headers[0] = goes.NewHeader(10, 10, 10)
}
